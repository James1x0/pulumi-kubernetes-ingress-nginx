# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *
import pulumi_kubernetes

__all__ = ['IngressControllerArgs', 'IngressController']

@pulumi.input_type
class IngressControllerArgs:
    def __init__(__self__, *,
                 controller: Optional[pulumi.Input['ControllerArgs']] = None,
                 helm_options: Optional[pulumi.Input['ReleaseArgs']] = None):
        """
        The set of arguments for constructing a IngressController resource.
        :param pulumi.Input['ReleaseArgs'] helm_options: Optional Helm Chart release metadata (name, version, chart options, etc).
        """
        if controller is not None:
            pulumi.set(__self__, "controller", controller)
        if helm_options is not None:
            pulumi.set(__self__, "helm_options", helm_options)

    @property
    @pulumi.getter
    def controller(self) -> Optional[pulumi.Input['ControllerArgs']]:
        return pulumi.get(self, "controller")

    @controller.setter
    def controller(self, value: Optional[pulumi.Input['ControllerArgs']]):
        pulumi.set(self, "controller", value)

    @property
    @pulumi.getter(name="helmOptions")
    def helm_options(self) -> Optional[pulumi.Input['ReleaseArgs']]:
        """
        Optional Helm Chart release metadata (name, version, chart options, etc).
        """
        return pulumi.get(self, "helm_options")

    @helm_options.setter
    def helm_options(self, value: Optional[pulumi.Input['ReleaseArgs']]):
        pulumi.set(self, "helm_options", value)


class IngressController(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 controller: Optional[pulumi.Input[pulumi.InputType['ControllerArgs']]] = None,
                 helm_options: Optional[pulumi.Input[pulumi.InputType['ReleaseArgs']]] = None,
                 __props__=None):
        """
        Ingress controller for Kubernetes using NGINX as a reverse proxy and load balancer

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ReleaseArgs']] helm_options: Optional Helm Chart release metadata (name, version, chart options, etc).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IngressControllerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Ingress controller for Kubernetes using NGINX as a reverse proxy and load balancer

        :param str resource_name: The name of the resource.
        :param IngressControllerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IngressControllerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 controller: Optional[pulumi.Input[pulumi.InputType['ControllerArgs']]] = None,
                 helm_options: Optional[pulumi.Input[pulumi.InputType['ReleaseArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IngressControllerArgs.__new__(IngressControllerArgs)

            __props__.__dict__["controller"] = controller
            __props__.__dict__["helm_options"] = helm_options
            __props__.__dict__["status"] = None
        super(IngressController, __self__).__init__(
            'chart-ingress-nginx:index:IngressController',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.ReleaseStatus']:
        """
        Detailed information about the status of the underlying Helm deployment.
        """
        return pulumi.get(self, "status")

