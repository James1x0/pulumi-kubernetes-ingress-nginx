// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package chart

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Ingress controller for Kubernetes using NGINX as a reverse proxy and load balancer
type IngressController struct {
	pulumi.ResourceState

	// Detailed information about the status of the underlying Helm deployment.
	Status ReleaseStatusOutput `pulumi:"status"`
}

// NewIngressController registers a new resource with the given unique name, arguments, and options.
func NewIngressController(ctx *pulumi.Context,
	name string, args *IngressControllerArgs, opts ...pulumi.ResourceOption) (*IngressController, error) {
	if args == nil {
		args = &IngressControllerArgs{}
	}

	var resource IngressController
	err := ctx.RegisterRemoteComponentResource("chart-ingress-nginx:index:IngressController", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type ingressControllerArgs struct {
	Controller *Controller `pulumi:"controller"`
	// Optional Helm Chart release metadata (name, version, chart options, etc).
	HelmOptions *Release `pulumi:"helmOptions"`
}

// The set of arguments for constructing a IngressController resource.
type IngressControllerArgs struct {
	Controller ControllerPtrInput
	// Optional Helm Chart release metadata (name, version, chart options, etc).
	HelmOptions ReleasePtrInput
}

func (IngressControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ingressControllerArgs)(nil)).Elem()
}

type IngressControllerInput interface {
	pulumi.Input

	ToIngressControllerOutput() IngressControllerOutput
	ToIngressControllerOutputWithContext(ctx context.Context) IngressControllerOutput
}

func (*IngressController) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressController)(nil))
}

func (i *IngressController) ToIngressControllerOutput() IngressControllerOutput {
	return i.ToIngressControllerOutputWithContext(context.Background())
}

func (i *IngressController) ToIngressControllerOutputWithContext(ctx context.Context) IngressControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressControllerOutput)
}

func (i *IngressController) ToIngressControllerPtrOutput() IngressControllerPtrOutput {
	return i.ToIngressControllerPtrOutputWithContext(context.Background())
}

func (i *IngressController) ToIngressControllerPtrOutputWithContext(ctx context.Context) IngressControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressControllerPtrOutput)
}

type IngressControllerPtrInput interface {
	pulumi.Input

	ToIngressControllerPtrOutput() IngressControllerPtrOutput
	ToIngressControllerPtrOutputWithContext(ctx context.Context) IngressControllerPtrOutput
}

type ingressControllerPtrType IngressControllerArgs

func (*ingressControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressController)(nil))
}

func (i *ingressControllerPtrType) ToIngressControllerPtrOutput() IngressControllerPtrOutput {
	return i.ToIngressControllerPtrOutputWithContext(context.Background())
}

func (i *ingressControllerPtrType) ToIngressControllerPtrOutputWithContext(ctx context.Context) IngressControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressControllerPtrOutput)
}

// IngressControllerArrayInput is an input type that accepts IngressControllerArray and IngressControllerArrayOutput values.
// You can construct a concrete instance of `IngressControllerArrayInput` via:
//
//          IngressControllerArray{ IngressControllerArgs{...} }
type IngressControllerArrayInput interface {
	pulumi.Input

	ToIngressControllerArrayOutput() IngressControllerArrayOutput
	ToIngressControllerArrayOutputWithContext(context.Context) IngressControllerArrayOutput
}

type IngressControllerArray []IngressControllerInput

func (IngressControllerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IngressController)(nil)).Elem()
}

func (i IngressControllerArray) ToIngressControllerArrayOutput() IngressControllerArrayOutput {
	return i.ToIngressControllerArrayOutputWithContext(context.Background())
}

func (i IngressControllerArray) ToIngressControllerArrayOutputWithContext(ctx context.Context) IngressControllerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressControllerArrayOutput)
}

// IngressControllerMapInput is an input type that accepts IngressControllerMap and IngressControllerMapOutput values.
// You can construct a concrete instance of `IngressControllerMapInput` via:
//
//          IngressControllerMap{ "key": IngressControllerArgs{...} }
type IngressControllerMapInput interface {
	pulumi.Input

	ToIngressControllerMapOutput() IngressControllerMapOutput
	ToIngressControllerMapOutputWithContext(context.Context) IngressControllerMapOutput
}

type IngressControllerMap map[string]IngressControllerInput

func (IngressControllerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IngressController)(nil)).Elem()
}

func (i IngressControllerMap) ToIngressControllerMapOutput() IngressControllerMapOutput {
	return i.ToIngressControllerMapOutputWithContext(context.Background())
}

func (i IngressControllerMap) ToIngressControllerMapOutputWithContext(ctx context.Context) IngressControllerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressControllerMapOutput)
}

type IngressControllerOutput struct{ *pulumi.OutputState }

func (IngressControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressController)(nil))
}

func (o IngressControllerOutput) ToIngressControllerOutput() IngressControllerOutput {
	return o
}

func (o IngressControllerOutput) ToIngressControllerOutputWithContext(ctx context.Context) IngressControllerOutput {
	return o
}

func (o IngressControllerOutput) ToIngressControllerPtrOutput() IngressControllerPtrOutput {
	return o.ToIngressControllerPtrOutputWithContext(context.Background())
}

func (o IngressControllerOutput) ToIngressControllerPtrOutputWithContext(ctx context.Context) IngressControllerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IngressController) *IngressController {
		return &v
	}).(IngressControllerPtrOutput)
}

type IngressControllerPtrOutput struct{ *pulumi.OutputState }

func (IngressControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressController)(nil))
}

func (o IngressControllerPtrOutput) ToIngressControllerPtrOutput() IngressControllerPtrOutput {
	return o
}

func (o IngressControllerPtrOutput) ToIngressControllerPtrOutputWithContext(ctx context.Context) IngressControllerPtrOutput {
	return o
}

func (o IngressControllerPtrOutput) Elem() IngressControllerOutput {
	return o.ApplyT(func(v *IngressController) IngressController {
		if v != nil {
			return *v
		}
		var ret IngressController
		return ret
	}).(IngressControllerOutput)
}

type IngressControllerArrayOutput struct{ *pulumi.OutputState }

func (IngressControllerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressController)(nil))
}

func (o IngressControllerArrayOutput) ToIngressControllerArrayOutput() IngressControllerArrayOutput {
	return o
}

func (o IngressControllerArrayOutput) ToIngressControllerArrayOutputWithContext(ctx context.Context) IngressControllerArrayOutput {
	return o
}

func (o IngressControllerArrayOutput) Index(i pulumi.IntInput) IngressControllerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IngressController {
		return vs[0].([]IngressController)[vs[1].(int)]
	}).(IngressControllerOutput)
}

type IngressControllerMapOutput struct{ *pulumi.OutputState }

func (IngressControllerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IngressController)(nil))
}

func (o IngressControllerMapOutput) ToIngressControllerMapOutput() IngressControllerMapOutput {
	return o
}

func (o IngressControllerMapOutput) ToIngressControllerMapOutputWithContext(ctx context.Context) IngressControllerMapOutput {
	return o
}

func (o IngressControllerMapOutput) MapIndex(k pulumi.StringInput) IngressControllerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IngressController {
		return vs[0].(map[string]IngressController)[vs[1].(string)]
	}).(IngressControllerOutput)
}

func init() {
	pulumi.RegisterOutputType(IngressControllerOutput{})
	pulumi.RegisterOutputType(IngressControllerPtrOutput{})
	pulumi.RegisterOutputType(IngressControllerArrayOutput{})
	pulumi.RegisterOutputType(IngressControllerMapOutput{})
}
